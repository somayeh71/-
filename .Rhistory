j=j+my_block_sizes[i]
}
membership_vector
membership_vector=0
j=1
for (i in length(my_block_sizes )) {
membership_vector[j]<- rep.int(i,times =my_block_sizes[i] )
j=j+my_block_sizes[i]
}
membership_vector
for (i in length(my_block_sizes )) {
membership_vector = rep.int(i,times =my_block_sizes[i] )
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
append(membership_vector, rep.int(i,times =my_block_sizes[i] ))
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
append(membership_vector, buf )
}
membership_vector
buf
append(membership_vector, buf )
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
append(membership_vector, buf )
}
membership_vector
i=1
buf=rep.int(i,times =my_block_sizes[i])
buf
append(membership_vector, buf )
i=2
buf=rep.int(i,times =my_block_sizes[i])
buf
append(membership_vector, buf )
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=append(membership_vector, buf )
}
membership_vector
membership_vector=[]
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append(membership_vector, buf )
}
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append(0, buf )
}
membership_vector
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append([], buf )
}
i=1
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append(membership_vector, buf )
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append(membership_vector, buf )
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector= append(membership_vector, buf )
}
membership_vector
membership_vector=0
i=1
buf=rep.int(i,times =my_block_sizes[i])
membership_vector<- append(membership_vector, buf )
membership_vector
i=i+1
buf=rep.int(i,times =my_block_sizes[i])
membership_vector<- append(membership_vector, buf )
membership_vector
buf=rep.int(i,times =my_block_sizes[i])
membership_vector<- append(membership_vector, buf )
i=i+1
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector<- append(membership_vector, buf )
i=i+1
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector<- append(membership_vector, buf )
i=i+1
}
membership_vector
c=0
for (i in length(my_block_sizes )) {
c[i]=rep.int(i,times =my_block_sizes[i])
}
c[][]=0
for (i in length(my_block_sizes )) {
c[i][]=rep.int(i,times =my_block_sizes[i])
}
c[i]=rep.int(i,times =my_block_sizes[i])
c[][]
c[i]=rep.int(i,times =my_block_sizes[i])
for (i in length(my_block_sizes )) {
c[i]=rep.int(i,times =my_block_sizes[i])
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=apply( buf,membership_vector)
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=apply(membership_vector, buf)
}
membership_vector
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=apply(membership_vector, buf)
}
membership_vector
p<-cbind( c(1, 0,0), c(0, 1,0) ,c(0,0,1))
n=10
my_block_sizes <- c(3,3,4)
g <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=apply(membership_vector, buf)
}
membership_vector
i
i
i
i
i
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=apply(membership_vector, buf)
}
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
membership_vector=append( buf,membership_vector)
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector=append( buf,membership_vector,j)
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector=append( membership_vector,buf,j)
}
membership_vector
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
# j=length(membership_vector)
membership_vector=append( membership_vector,buf,j)
j=length(membership_vector)
}
membership_vector
j=1
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector[j:j+length(buf)]=append( membership_vector,buf,j)
}
membership_vector
j=1
membership_vector=0
j=1
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector[]=append( membership_vector,buf,j+length(buf))
}
membership_vector
j=1
membership_vector=0
for (i in length(my_block_sizes )) {
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector=append( membership_vector,buf,j+length(buf))
}
membership_vector
i=1
buf=rep.int(i,times =my_block_sizes[i])
j=length(membership_vector)
membership_vector=append( membership_vector,buf,j+length(buf))
membershi
membership_vector
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
membership_vector
wc <- cluster_walktrap(g)
modularity(wc)
a=membership(wc)
a=membership(wc)
plot(wc, g)
membership_vector = cbind(c(1:n), membership_vector)
a = cbind(c(1:n), a)
NMI(membership_vector, a)
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
}m
membership_vector
#save membership vector for python
write.csv(as.data.frame.matrix(membership_vector),'sim1-membership.csv',row.names = F)
membership_vector
#save membership vector for python
write.csv(as.data.frame.vector(membership_vector),'sim1-membership.csv',row.names = F)
membership_vector
library(igraph)
library(NMI)
p<-cbind( c(1, 0,0), c(0, 1,0),c(0, 0,1))
n=10
my_block_sizes <- c(3,3,4)
g <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
rand <- sample(nrow(g))
rand
A=g[rand, ]
Amembership_vector=membership_vector[rand,]
wc <- cluster_walktrap(g)
library(NMI)
library(igraph)
library(NMI)
p<-cbind( c(1, 0,0), c(0, 1,0),c(0, 0,1))
n=10
my_block_sizes <- c(3,3,4)
g <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
rand <- sample(nrow(g))
rand
A=g[rand, ]
Amembership_vector=membership_vector[rand,]
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
A=g[rand, ]
s
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
set.seed(1)
rand <- sample(nrow(g))
rand
library(igraph)
library(NMI)
p<-cbind( c(1, 0,0), c(0, 1,0),c(0, 0,1))
n=10
my_block_sizes <- c(3,3,4)
g <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
set.seed(1)
rand <- sample(nrow(g))
rand
sample(nrow(g))
nrow(g)
set.seed(1)
rand <- sample(10)
rand
g[rand, ]
Amembership_vector=membership_vector[rand,]
Amembership_vector=membership_vector[rand,]
g[rand, ]
Amembership_vector=membership_vector[rand,]
membership_vector[rand,]
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
A=g[rand, ]
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
modularity(wc)
a=membership(wc)
modularity(Awc)
Aa=membership(Awc)
Awc<- cluster_walktrap(A)
A <- g[rand, ]
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
A <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
set.seed(1)
rand <- sample(10)
rand
A <- g[rand, ]
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
typeof(A)
typeof(g)
A <- g[rand, ]
A=as.list(A)
typeof(A)
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
typeof(A)
typeof(g)
View(A)
View(A)
#Amembership_vector=membership_vector[rand,]
A
A = g[rand, ]
#Amembership_vector=membership_vector[rand,]
A
A=as.list(A)
#Amembership_vector=membership_vector[rand,]
A
A=as.list(A)
A = g[rand, ]
#Amembership_vector=membership_vector[rand,]
A
View(A)
View(A)
membership_vector=t(t(membership_vector))
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(t(Amembership_vector))
Amembership_vector
Amembership_vector=t(Amembership_vector)
Amembership_vector
A = g[rand, ]
A
A=as.list(A)
A
A
A = g[rand, ]
A
A=as.list(A)
A
View(A)
A = g[rand, ]
A = g[rand, ]
A
A=as.list(A)
A
A=as.list.numeric_version(A)
A
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
A=as.list.numeric_version(A)
A
A=as.array(A)
A
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
A=as.array(A)
A
View(A)
Awc<- cluster_walktrap(A)
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
A=as.list(A)
A
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
A=as.array(A)
A
A = g[rand, ]
A
A=as.list.data.frame(A)
A
A = g[rand, ]
A=as.list.Date(A)
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
A=as.list.Date(A)
A=as.list.Date(as.array(A))
A
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
A=as.array(A))
A
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(A)
View(g)
gg = vector('list',n)
A = g[rand, ]
a[i,:]
a[i,1:n]
a[i][1:n]
a[i]
A[i]
A[[i]]
View(A)
A
A[1,]
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
gg = vector('list',n)
for (i in n) {
gg[i]=A[i,]
}
gg = vector('list',n)
for (i in n) {
gg[i,]=A[i,]
}
gg
e
gg = vector('list',n)
gg
gg[[i]]=A[i,]
gg = vector('list',n)
for (i in n) {
gg[[i]]=A[i,]
}
A
gg
gg = vector('list',n)
for (i in 1:n) {
gg[[i]]=A[i,]
}
gg
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(gg)
typeof(g)
typeof(gg)
View(gg)
View(g)
View(g)
View(gg)
View(g)
View(gg)
View(g)
View(gg)
View(g)
gg = vector('list',n)
for (i in 1:n) {
gg[i]=A[[i,]]
}
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
gg = vector('list',n)
for (i in 1:n) {
gg[[i]]=as.list(A[i,])
}
gg
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(gg)
View(gg)
View(g)
View(gg)
View(g)
g <- sample_sbm(n, pref.matrix=p, my_block_sizes )
A <- sample_sbm(n, pref.matrix=p, my_block_sizes )
membership_vector=rep(seq_along(my_block_sizes), my_block_sizes)
set.seed(1)
rand <- sample(10)
rand
A = g[rand, ]
membership_vector=t(t(membership_vector))
Amembership_vector=membership_vector[rand,]
Amembership_vector=t(Amembership_vector)
A
Amembership_vector
gg = vector('list',n)
for (i in 1:n) {
gg[[i]]=as.list(A[i,])
}
gg
wc <- cluster_walktrap(g)
Awc<- cluster_walktrap(gg)
modularity(wc)
as.character.numeric_version(gg)
Awc<- cluster_walktrap(gg)
View(gg)
View(g)
View(gg)
